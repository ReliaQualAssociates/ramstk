name: PR Merge Workflow

on:
  push:
    branches:
      - master
    tags-ignore:
      - "*"

jobs:
  test_suite:
    name: Execute RAMSTK Test Suite with Coverage
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python: [3.6, 3.7, 3.8]

    services:
      postgres:
        image: postgres
        env:
          POSTGRES_PASSWORD: postgres
        ports:
          - 5432:5432

    steps:
      - uses: actions/checkout@v2

      - name: Update and install system packages
        run: |
          echo "VIRTUAL_ENV=ramstk-venv${{ matrix.python }}" >> $GITHUB_ENV
          sudo apt-get update
          sudo apt-get install -y --no-install-recommends apt-utils git libgirepository1.0-dev gir1.2-gtk-3.0 python3-gi python3-gi-cairo python3-pytest libenchant1c2a libenchant-dev python3-numpy python3-scipy xauth xvfb

      - name: Set up Python ${{ matrix.python }}
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python }}

      - name: Create a virtual environment
        run: |
          python -mvenv $VIRTUAL_ENV

      - name: Install RAMSTK dependencies and test with coverage
        run: |
          source $VIRTUAL_ENV/bin/activate
          pip install -U pip setuptools>12.0 urllib3 poetry
          python poetry_fix.py
          make depends
          make PREFIX=$VIRTUAL_ENV install
          xvfb-run --auto-servernum make coverage

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v1
        with:
          files: ./cobertura.xml
          flags: ${{ matrix.python }}

      - name: Create Coveralls report
        uses: miurahr/coveralls-python-action@patch-pyprject-toml
        with:
          parallel: true

  upload_coveralls:
    name: Upload Coverage Results to Coveralls
    needs: test_suite
    runs-on: ubuntu-latest
    steps:
      - name: Upload report to Coveralls
        uses: miurahr/coveralls-python-action@patch-pyprject-toml
        with:
          parallel-finished: true

  pre_release:
    name: Create Development Release
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: Push 'latest' tag
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git tag -f -a -m"push latest tag" latest
          git push -f --tags

      - name: Draft 'latest' release notes
        uses: release-drafter/release-drafter@master
        with:
          name: "Next Release"
          tag: "latest"
          version: "latest"
          prerelease: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  todo_issue:
    name: Create Issues from TODOs
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: TODO to Issue
        id: todo
        uses: alstr/todo-to-issue-action@master
        with:
          REPO: ${{ github.repository }}
          BEFORE: ${{ github.event.before }}
          SHA: ${{ github.sha }}
          TOKEN: ${{ secrets.GITHUB_TOKEN }}
          LABEL: "# ISSUE:"
          COMMENT_MARKER: "#"
          AUTO_P: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
