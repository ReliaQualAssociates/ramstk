# This workflow runs when a push is made to the master branch.
#
# - Job 1:
#     - Pushes 'latest' tag.  This happens on every push to master.
#     - Updates draft release notes.  This happens on every push to master.
# - Job 2:
#     - Creates issues from any issue comments.
# - Job 3:
#     - IF branch is release/*:
#         - Get new version from VERSION.
#         - Push version tag.
#         - Draft release notes.
# - Job 4:
#     - IF branch is release/*:
#         - Build wheel and sdist.
#         - Upload wheel and sdist to Test PyPi.
#         - Test install from Test PyPi.
#         - Upload wheel and sdist to PyPi.
#         - Upload wheel to GitHub Release. (pending)
# Environment:
#   DO_VERSION - Whether to create version tag (default: 0).  Set to 1 to create.

name: Merge Pull Request Workflow

on:
  push:
    branches:
      - master
    tags-ignore:
      - "*"

jobs:
  tag-latest:
    name: Tag Repository as 'latest'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: Push 'latest' tag
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git tag -f -a -m"push latest tag" latest
          git push -f --tags

      - name: Draft 'latest' release notes
        uses: release-drafter/release-drafter@master
        with:
          name: "Next Release"
          tag: "latest"
          version: "latest"
          prerelease: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  todo_issue:
    name: Create Issues from TODOs
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: TODO to Issue
        id: todo
        uses: alstr/todo-to-issue-action@master
        with:
          REPO: ${{ github.repository }}
          BEFORE: ${{ github.event.before }}
          SHA: ${{ github.sha }}
          TOKEN: ${{ secrets.GITHUB_TOKEN }}
          LABEL: "# ISSUE:"
          COMMENT_MARKER: "#"
          AUTO_P: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  tag-version:
    name: Tag Repository with Version
    if: startsWith(github.head_ref, 'release/')
    runs-on: ubuntu-latest
    env:
      DO_VERSION: 0
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: Get new version
        id: newversion
        run: |
          echo "::set-output name=version::$(echo $(cat VERSION))"

      - name: Push version tag
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git tag -a -m"v${{ steps.newversion.outputs.version }}" v${{ steps.newversion.outputs.version }}
          git push --tags

      - name: Create release notes
        uses: release-drafter/release-drafter@master
        with:
          name: "v${{ steps.newversion.outputs.version }}"
          tag: "v${{ steps.newversion.outputs.version }}"
          version: "${{ steps.newversion.outputs.version }}"
          prerelease: false
          publish: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  build-deploy:
    name: Build and Deploy RAMSTK
    if: startsWith(github.head_ref, 'release/')
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: Build release
        id: build
        run: |
          pip install -U pip poetry twine
          make build && echo "build_ok=1" >> $GITHUB_ENV

      - name: Publish to Test PyPi
        if: ${{ env.build_ok == 1 }}
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          user: __token__
          password: ${{ secrets.TEST_PYPI_API_TOKEN }}
          repository_url: https://test.pypi.org/legacy/

      - name: Test install from Test PyPI
        run: |
          sudo apt-get update
          sudo apt-get install -y --no-install-recommends apt-utils git libgirepository1.0-dev gir1.2-gtk-3.0 python3-gi python3-gi-cairo python3-pytest libenchant1c2a libenchant-dev python3-numpy python3-scipy xauth xvfb
          pip install \
          --index-url https://test.pypi.org/simple/ \
          --extra-index-url https://pypi.org/simple \
          ramstk && echo "install_ok=1" >> $GITHUB_ENV

      - name: Publish to PyPi
        if: ${{ env.install_ok == 1 }}
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          user: __token__
          password: ${{ secrets.PYPI_API_TOKEN }}
