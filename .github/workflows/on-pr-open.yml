# This workflow runs when a pull request is opened.
#
# - Job 1:
#     - Check the PR title follows conventional commit spec.
# - Job 2:
#     - Label the PR based on the rules in .github/pr-labler.yml
# - Job 3:
#     - Gets the tag that was just pushed.
#     - Creates unpublished release notes.
#     - Uses release notes to update CHANGELOG.md.

name: Open Pull Request Workflow

on:
  pull_request:
    types: [opened]

jobs:
  good-pr-title:
    name: Ensure Conventional PR Title
    runs-on: ubuntu-latest
    steps:
      - name: Ensure PR title follows conventional commits specification
        uses: aslafy-z/conventional-pr-title-action@master
        with:
          success-state: Conventional commits compliant title detected.
          failure-state: Pull request title is not conventional commits compliant!
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  pr-labeler:
    name: Label Pull Request from Branch Name
    runs-on: ubuntu-latest
    steps:
      - name: Apply Labels to PR
        uses: TimonVS/pr-labeler-action@v3
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  update-changelog:
    name: Update CHANGELOG.md
    runs-on: ubuntu-latest
    steps:
      - name: Get tag
        id: gettag
        uses: "WyriHaximus/github-action-get-previous-tag@master"
        env:
          GITHUB_TOKEN: "${{ secrets.GITHUB_TOKEN }}"

      - name: Create (unpublished) release notes
        id: releasenotes
        uses: release-drafter/release-drafter@master
        with:
          name: "${{ steps.gettag.outputs.tag }}"
          tag: "${{ steps.gettag.outputs.tag }}"
          version: "${{ steps.gettag.outputs.tag }}"
          publish: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Update CHANGELOG.md
        uses: vemel/nextchange@0.1.0
        with:
          release: "${{ steps.releasenotes.outputs.tag_name }}"
          append: "${{ steps.releasenotes.outputs.body }}"
