name: PR Close Workflow

on:
  pull_request:
    branches:
      - master
    types: [closed]

jobs:
  bump_version:
    name: Update Version Files
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: Get PR labels
        id: prlabels
        uses: joerick/pr-labels-action@v1.0.6

      - name: Get current version
        id: curversion
        run: |
          tag_version=$(git describe $(git rev-list --tags --max-count=1 --skip=1) | cut -d '-' -f1 | cut -d 'v' -f2)
          tag_version=$(echo $tag_version | cut -d 'v' -f2)

          tag_major=$(echo $tag_version | cut -d '.' -f1)
          tag_minor=$(echo $tag_version | cut -d '.' -f2)
          tag_patch=$(echo $tag_version | cut -d '.' -f3)

          echo "::set-output name=tag_version::$(echo $tag_version)"
          echo "::set-output name=tag_major::$(echo $tag_major)"
          echo "::set-output name=tag_minor::$(echo $tag_minor)"
          echo "::set-output name=tag_patch::$(echo $tag_patch)"

      - name: Determine next SemVer
        id: semver
        uses: WyriHaximus/github-action-next-semvers@v1
        with:
          version: ${{ steps.curversion.outputs.tag_version }}

      - name: Set next version
        id: nextversion
        run: |
          if [ -n "$GITHUB_PR_LABEL_BUMP_MAJOR" ]; then
            echo "::set-output name=next_version::$(echo ${{ steps.semver.outputs.major }})"
            echo "do_tag=1" >> $GITHUB_ENV
            echo "do_release=1" >> $GITHUB_ENV
          elif [ -n "$GITHUB_PR_LABEL_BUMP_MINOR" ]; then
            echo "::set-output name=next_version::$(echo ${{ steps.semver.outputs.minor }})"
            echo "do_tag=1" >> $GITHUB_ENV
            echo "do_release=1" >> $GITHUB_ENV
          elif [ -n "$GITHUB_PR_LABEL_BUMP_PATCH" ]; then
            echo "::set-output name=next_version::$(echo ${{ steps.semver.outputs.patch }})"
            echo "do_tag=1" >> $GITHUB_ENV
          else
            echo "::set-output name=next_version::$(echo ${{ steps.curversion.outputs.tag_version }})"
            echo "do_release=0" >> $GITHUB_ENV
            echo "do_tag=0" >> $GITHUB_ENV
          fi

      - name: Check
        run: |
          echo "${{ steps.prlabels.outputs.labels }}"
          echo "${{ steps.curversion.outputs.tag_version }}"
          echo "${{ steps.curversion.outputs.tag_major }}"
          echo "${{ steps.curversion.outputs.tag_minor }}"
          echo "${{ steps.curversion.outputs.tag_patch }}"
          echo "${{ steps.nextversion.outputs.next_version }}"
          echo "${{ env.do_release }}"
          echo "${{ env.do_tag }}"

      - name: Update VERSION and pyproject.toml file
        if: ${{ env.do_tag == 1 }}
        run: |
          echo "${{ steps.nextversion.outputs.next_version }}" > VERSION
          sed -i 's/\(^version =.*$\)/version = "${{ steps.nextversion.outputs.next_version }}"/' pyproject.toml
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add .
          git commit -a -m "Update VERSION and pyproject.toml" && echo "do_push=1" >> $GITHUB_ENV

      - name: Set PR variables
        id: prvars
        run: |
          if [ ${{ env.do_release }} == 1 ]; then
            echo ::set-output name=title::"ci: set for release"
            echo ::set-output name=body::"Bump VERSION and pyproject.toml to next version; set for release."
            echo ::set-output name=message::"ci: release v${{ steps.nextversion.outputs.next_version }}"
            echo ::set-output name=branch::"release/v${{ steps.nextversion.outputs.next_version }}"
          else
            echo ::set-output name=title::"ci: bump version files"
            echo ::set-output name=body::"Bump VERSION and pyproject.toml to next patch version."
            echo ::set-output name=message::"ci: bump version files"
            echo ::set-output name=branch::"ci/bump_version_files"
          fi

      - name: Check 2
        run: |
          echo "${{ steps.prvars.outputs.message }}"
          echo "${{ steps.prvars.outputs.title }}"
          echo "${{ steps.prvars.outputs.body }}"
          echo "${{ steps.prvars.outputs.branch }}"

      - name: Cut pull request to merge updated version files
        if: ${{ env.do_push == 1 }}
        uses: peter-evans/create-pull-request@v3
        with:
          commit-message: ${{ steps.prvars.outputs.message }}
          title: ${{ steps.prvars.outputs.title }}
          body: ${{ steps.prvars.outputs.body }}
          branch: ${{ steps.prvars.outputs.branch }}
