name: On Release Workflow

on:
  pull_request:
    branches:
      - master
    types: [closed]

jobs:
  tagged-release:
    name: Create Tagged Release
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: Get PR labels
        id: prlabels
        uses: joerick/pr-labels-action@v1.0.6

      - name: Get new version
        id: newversion
        run: |
          echo "::set-output name=version::$(echo $(cat VERSION))"

      - name: Push versioned tag
        if: contains(steps.prlabels.outputs.labels, ' Release ')
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git tag -a -m"v${{ steps.newversion.outputs.version }}" v${{ steps.newversion.outputs.version }}
          git push --tags

      - name: Draft release notes
        if: contains(steps.prlabels.outputs.labels, ' Release ')
        uses: release-drafter/release-drafter@master
        with:
          name: "v${{ steps.newversion.outputs.version }}"
          tag: "v${{ steps.newversion.outputs.version }}"
          version: "${{ steps.newversion.outputs.version }}"
          prerelease: false
          publish: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  build-deploy:
    needs: tagged-release
    name: Build and Deploy RAMSTK
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: Get PR labels
        id: prlabels
        uses: joerick/pr-labels-action@v1.0.6

      - name: Build release
        id: build
        if: contains(steps.prlabels.outputs.labels, ' Release ')
        run: |
          pip install -U pip poetry twine
          make build && echo "build_ok=1" >> $GITHUB_ENV

      - name: Publish to Test PyPi
        if: ${{ env.build_ok == 1 }}
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          user: __token__
          password: ${{ secrets.TEST_PYPI_API_TOKEN }}
          repository_url: https://test.pypi.org/legacy/

      - name: Test install from TestPyPI
        run: |
          sudo apt-get update
          sudo apt-get install -y --no-install-recommends apt-utils git libgirepository1.0-dev gir1.2-gtk-3.0 python3-gi python3-gi-cairo python3-pytest libenchant1c2a libenchant-dev python3-numpy python3-scipy xauth xvfb
          pip install \
          --index-url https://test.pypi.org/simple/ \
          --extra-index-url https://pypi.org/simple \
          ramstk && echo "install_ok=1" >> $GITHUB_ENV

      - name: Publish to PyPi
        if: ${{ env.install_ok == 1 }}
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          user: __token__
          password: ${{ secrets.PYPI_API_TOKEN }}

  create_new_milestone:
    name: Create New Milestone
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2.2.0
        with:
          fetch-depth: 0

      - name: Get PR labels
        id: prlabels
        uses: joerick/pr-labels-action@v1.0.6

      - name: Get new version
        id: newversion
        run: |
          echo "::set-output name=version::$(echo $(cat VERSION))"

      - name: Get next semantic version
        id: nextversion
        uses: WyriHaximus/github-action-next-semvers@v1.1.0
        with:
          version: ${{ steps.newversion.outputs.version }}

      - name: Create new release milestone
        if: contains(steps.prlabels.outputs.labels, ' Release ')
        uses: WyriHaximus/github-action-create-milestone@master
        with:
          title: "${{ steps.nextversion.outputs.v_minor }}"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
