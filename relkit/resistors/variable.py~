#!/usr/bin/env python
# -*- coding: utf-8 -*-
#
#       variable.py is part of The ReliaFree Project
#
#       Copyright (C) 2007-2011 Andrew "Weibullguy" Rowland <darowland@ieee.org>
#
# All rights reserved.
#
# ReliaFree is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# ReliaFree is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with ReliaFree.  If not, see <http://www.gnu.org/licenses/>.

try:
    import reliafree.widgets as _widg
except:
    import widgets as _widg
from resistor import Resistor

class Wirewound(Resistor):

    """ Variable Value Wirewound Resistor Component Class.

        Hazard Rate Models:
            1. MIL-HDBK-217F, section 9.9

    """

    _quality = ["", "S", "R", "P", "M", "MIL-R-27208", "Lower"]
    _range = ["", "10 to 2.0K", "2.0K to 5.0K", "5.0K to 20.0K"]
    _specification = ["", "MIL-R-39015 (RTR)", "MIL-R-27208 (RE)"]
    _specsheet = [["", "RTR12", "RTR22", "RTR24"], ["", "RT12", "RT22", "RT26",
                   "RT27"]]

    def __init__(self):

        """ Initializes the Variable Value Wirewound Resistor Component
            Class.

        """

        Resistor.__init__(self)

        self.subcategory = 33                   # Subcategory ID in reliafreecom database.

        # MIL-HDK-217F hazard rate calculation variables.
        # ----- ----- ----- ----- ----- ----- ----- ----- ----- ----- -----
        self._piR = [1.0, 1.4, 2.0]
        self._piE = [1.0, 2.0, 12.0, 6.0, 20.0, 5.0, 8.0, 9.0, 15.0, 33.0, 0.5,
                     18.0, 48.0, 870.0]
        self._piQ = [0.02, 0.06, 0.2, 0.6, 3.0, 10.0]
        self._lambdab_count = [0.025, 0.055, 0.35, 0.15, 0.58, 0.16, 0.26, 0.35, 0.58, 1.1, 0.013, 0.52, 1.6, 24.0]
        # ----- ----- ----- ----- ----- ----- ----- ----- ----- ----- -----

        self._in_labels.append(u"Nominal Resistance (\u03A9):")
        self._in_labels.append(u"Specification:")
        self._in_labels.append(u"Spec Sheet:")
        self._in_labels.append(u"Number of Taps:")

        self._out_labels[2] = u"<span foreground=\"blue\">\u03BB<sub>p</sub> = \u03BB<sub>b</sub>\u03C0<sub>TAPS</sub>\u03C0<sub>R</sub>\u03C0<sub>V</sub>\u03C0<sub>Q</sub>\u03C0<sub>E</sub></span>"
        self._out_labels.append(u"\u03C0<sub>TAPS</sub>")
        self._out_labels.append(u"\u03C0<sub>V</sub>")

    def create_reliability_inputs(self, part, layout):

        """ Populates the ReliaFree Workbook calculation input tab with the
            widgets needed to select inputs for Variable Value Wirewound
            Resistor Component Class prediction calculations.

            Keyword Arguments:
              part -- the ReliaFree COMPONENT object.
            layout -- the layout widget to contain the display widgets.

        """

        Resistor.create_reliability_inputs(self, part, layout)

        part.txtResistance = _widg.make_entry()
        part.txtResistance.set_name("RESISTOR")
        part.txtResistance.show()
        part.txtResistance.connect("focus-out-event",
                                   self.entry_callback,
                                   part, "float", 95)
        layout.put(part.txtResistance, 155, 485)

        part.cmbSpecification = _widg.make_combo(simple=True)
        part.cmbSpecification.set_name("RESISTOR")
        part.cmbSpecification.show()
        for i in range(len(self._specification)):
            part.cmbSpecification.insert_text(i, self._specification[i])
        part.cmbSpecification.connect("changed",
                                     self.combo_callback,
                                     part, 101)
        layout.put(part.cmbSpecification, 155, 515)

        part.cmbSpecSheet = _widg.make_combo(simple=True)
        part.cmbSpecSheet.set_name("RESISTOR")
        part.cmbSpecSheet.show()
        part.cmbSpecSheet.connect("changed",
                                  self.combo_callback,
                                  part, 102)
        layout.put(part.cmbSpecSheet, 155, 545)

        part.txtNTaps = _widg.make_entry()
        part.txtNTaps.set_name("RESISTOR")
        part.txtNTaps.show()
        part.txtNTaps.connect("focus-out-event",
                              self.entry_callback,
                              part, "float", 57)
        layout.put(part.txtNTaps, 155, 575)

        part.txtResistance.set_text(str(part._calc_data[95]))
        part.cmbSpecification.set_active(int(part._calc_data[101]))
        part.cmbSpecSheet.set_active(int(part._calc_data[102]))
        part.txtNTaps.set_text(str(part._calc_data[57]))

        return False

    def create_reliability_outputs(self, part, layout):

        """ Populates the ReliaFree Workbook calculation results tab with the
            widgets to display Variable Value Resistor Component Class
            calculation results.

            Keyword Arguments:
              part -- the ReliaFree COMPONENT object.
            layout -- the layout widget to contain the display widgets.

        """

        Resistor.create_reliability_outputs(self, part, layout)

        # Create the Pi TAPS results entry.  We use the pi_u field
        # in the program database to the results.
        part.txtPiTAPS = _widg.make_entry(editable=False, bold=True)
        layout.put(part.txtPiTAPS, 155, 515)
        part.txtPiTAPS.set_text(str(part._calc_data[82]))

        part.txtPiV = _widg.make_entry(editable=False, bold=True)
        layout.put(part.txtPiV, 155, 545)
        part.txtPiV.set_text(str(part._calc_data[83]))

        return False

    def combo_callback(self, combo, part, _index_):

        """ Callback function for handling Variable Value Resistor Component
            Class ComboBox changes.

            Keyword Arguments:
              combo -- the combobox widget calling this function.
               part -- the ReliaFree COMPONENT object.
            _index_ -- the user-definded index for the calling combobx.

        """

        Resistor.combo_callback(self, combo, part, _index_)

        try:
            model = part._app.winParts._full_model
            row = part._app.winParts._model.convert_iter_to_child_iter(part._app.winParts._selected_row)
        except:
            return True

        idx = combo.get_active()

        if(_index_ == 101):                     # Specification
            for i in range(len(self._specsheet[idx - 1])):
                part.cmbSpecSheet.insert_text(i, self._specsheet[idx - 1][i])

        elif(_index_== 102):                    # Specification sheet
            idx2 = part._calc_data[101]

            if(idx2 == 1):                      # RTR
                part._calc_data[94] = 90.0
            elif(idx2 == 2):                    # RT
                if(idx == 1 or idx == 2):
                    part._calc_data[94] = 90.0
                elif(idx == 3 or idx == 4):
                    part._calc_data[94] = 40.0
                else:
                    part._calc_data[94] = 1.0
            else:
                part._calc_data[94] = 1.0

            model.set_value(row, 94, part._calc_data[94])

        return False

    def _calculate_mil_217_count(self, part):

        """ Performs MIL-HDBK-217F part count hazard rate calculations for the
            Variable Value Wirewound Resistor Component Class.

            Keyword Arguments:
            part -- the ReliaFree COMPONENT object.

        """

        from math import exp

        model = part._model
        row = part._selected_row

        # Retrieve hazard rate inputs.
        piQ = part._calc_data[79]
        Eidx = part._attribute[22]              # Environment index

        lambdab = self._lambdab_count[Eidx - 1]

        # Calculate component hazard rate.
        lambdap = lambdab * piQ

        part._calc_data[46] = lambdab
        model.set_value(row, 46, lambdab)

        model = part._app.HARDWARE._model
        row = part._app.HARDWARE._selected_row

        part._attribute[28] = lambdap
        model.set_value(row, 28, lambdap)

        part._app.ASSEMBLY.txtActiveHt.set_text(str(part._attribute[28]))

        return False

    def _calculate_mil_217_stress(self, part):

        """ Performs MIL-HDBK-217F part stress hazard rate calculations for
            the Variable Value Wirewound Resistor Component Class.

            Keyword Arguments:
            part -- the ReliaFree COMPONENT object.

        """

        from math import exp
        from math import sqrt

        model = part._model
        row = part._selected_row

        # Retrieve junction temperature inputs.
        Tamb = part._calc_data[37]
        P = part._calc_data[64]
        Trise = part._calc_data[107]
        thetaJC = part._calc_data[109]

        # Retrieve hazard rate inputs.
        Ntaps = part._calc_data[57]
        piR = part._calc_data[80]
        piQ = part._calc_data[79]
        Prated = part._calc_data[93]
        Vrated = part._calc_data[94]
        R = part._calc_data[95]

        # Base hazard rate
        S = P / Prated
        lambdab = 0.0062 * exp(((Tamb + 273) / 298)**5.0) * exp(S * ((Tamb + 273) / 273))

        # Potentiometer taps correction factor.
        piTAPS = ((Ntaps ** 1.5) / 25.0) + 0.792

        # Voltage correction factor.
        Vapplied = sqrt(R * P)
        Vratio = Vapplied / Vrated
        if(Vratio > 0.0 and Vratio <= 0.1):
            piV = 1.00
        elif(Vratio > 0.1 and Vratio <= 0.2):
            piV = 1.05
        elif(Vratio > 0.2 and Vratio <= 0.6):
            piV = 1.00
        elif(Vratio > 0.6 and Vratio <= 0.7):
            piV = 1.10
        elif(Vratio > 0.7 and Vratio <= 0.8):
            piV = 1.22
        elif(Vratio > 0.8 and Vratio <= 0.9):
            piV = 1.40
        elif(Vratio > 0.9 and Vratio <= 1.0):
            piV = 2.00

        # Environmental correction factor.
        idx = part._attribute[22]
        piE = self._piE[idx - 1]

        # Calculate component hazard rate.
        lambdap = lambdab * piTAPS * piR * piV * piQ * piE

        part._calc_data[46] = lambdab
        part._calc_data[72] = piE
        part._calc_data[80] = piR
        part._calc_data[82] = piTAPS
        part._calc_data[83] = piV
        part._calc_data[94] = Vapplied
        part._calc_data[111] = Vratio
        model.set_value(row, 46, lambdab)
        model.set_value(row, 72, piE)
        model.set_value(row, 80, piR)
        model.set_value(row, 82, piTAPS)
        model.set_value(row, 83, piV)
        model.set_value(row, 94, Vapplied)
        model.set_value(row, 111, Vratio)

        model = part._app.HARDWARE._model
        row = part._app.HARDWARE._selected_row

        part._attribute[28] = lambdap
        model.set_value(row, 28, lambdap)

        part.txtLambdaB.set_text(str(part._calc_data[46]))
        part.txtPiE.set_text(str(part._calc_data[72]))
        part.txtPiR.set_text(str(part._calc_data[80]))
        part.txtPiTAPS.set_text(str(part._calc_data[82]))
        part.txtPiV.set_text(str(part._calc_data[83]))

        part._app.ASSEMBLY.txtActiveHt.set_text(str(part._attribute[28]))

        return False

class WirewoundPower(Resistor):

    """ Variable Value Wirewound Power Resistor Component Class.

        Hazard Rate Models:
            1. MIL-HDBK-217F, section 9.12

    """

    _construction = ["", "Enclosed", "Unenclosed"]
    _quality = ["", "MIL-SPEC", "Lower"]
    _range = ["", "1 to 2.0K", ">2.0K to 5.0K", ">5.0K to 10.0K"]
    _specsheet = ["", "RR0900", "RR1000", "RR1100", "RR1300", "RR1400",
                  "RR2000", "RR2100", "RR3000", "RR3100", "RR3200", "RR3300",
                  "RR3400", "RR3500", "RR3600", "RR3700", "RR3800", "RR3900"]

    def __init__(self):

        """ Initializes the Variable Value Wirewound Power Resistor Component
            Class.

        """

        Resistor.__init__(self)

        self.subcategory = 33                   # Subcategory ID in reliafreecom database.

        # MIL-HDK-217F hazard rate calculation variables.
        # ----- ----- ----- ----- ----- ----- ----- ----- ----- ----- -----
        self._piC = [2.0, 1.0]
        self._piR = [1.0, 1.4, 2.0]
        self._piE = [1.0, 3.0, 16.0, 7.0, 28.0, 8.0, 12.0, 0.0, 0.0, 38.0,
                     0.5, 0.0, 0.0, 0.0]
        self._piQ = [2.0, 4.0]
        self._lambdab_count =[0.15, 0.34, 2.9, 1.2, 5.0, 1.6, 2.4, 0.0, 0.0, 7.6, 0.076, 0.0, 0.0, 0.0]
        # ----- ----- ----- ----- ----- ----- ----- ----- ----- ----- -----

        self._in_labels.append(u"Nominal Resistance (\u03A9):")
        self._in_labels.append(u"Construction:")
        self._in_labels.append(u"Number of Taps:")

        self._out_labels[2] = u"<span foreground=\"blue\">\u03BB<sub>p</sub> = \u03BB<sub>b</sub>\u03C0<sub>TAPS</sub>\u03C0<sub>C</sub>\u03C0<sub>R</sub>\u03C0<sub>V</sub>\u03C0<sub>Q</sub>\u03C0<sub>E</sub></span>"
        self._out_labels.append(u"\u03C0<sub>TAPS</sub>")
        self._out_labels.append(u"\u03C0<sub>C</sub>")
        self._out_labels.append(u"\u03C0<sub>V</sub>")

    def create_reliability_inputs(self, part, layout):

        """ Populates the ReliaFree Workbook calculation input tab with the
            widgets needed to select inputs for Variable Value Wirewound Power
            Resistor Component Class prediction calculations.

            Keyword Arguments:
              part -- the ReliaFree COMPONENT object.
            layout -- the layout widget to contain the display widgets.

        """

        Resistor.create_reliability_inputs(self, part, layout)

        part.txtResistance = _widg.make_entry()
        part.txtResistance.set_name("RESISTOR")
        part.txtResistance.show()
        part.txtResistance.connect("focus-out-event",
                                   self.entry_callback,
                                   part, "float", 95)
        layout.put(part.txtResistance, 155, 485)

        part.cmbConstruction = _widg.make_combo(simple=True)
        part.cmbConstruction.set_name("RESISTOR")
        part.cmbConstruction.show()
        for i in range(len(self._construction)):
            part.cmbConstruction.insert_text(i, self._construction[i])
        part.cmbConstruction.connect("changed",
                                  self.combo_callback,
                                  part, 16)
        layout.put(part.cmbConstruction, 155, 515)

        part.txtNTaps = _widg.make_entry()
        part.txtNTaps.set_name("RESISTOR")
        part.txtNTaps.show()
        part.txtNTaps.connect("focus-out-event",
                              self.entry_callback,
                              part, "float", 57)
        layout.put(part.txtNTaps, 155, 545)

        part.txtNTaps.set_text(str(part._calc_data[57]))
        part.txtResistance.set_text(str(part._calc_data[95]))
        part.cmbConstruction.set_active(int(part._calc_data[16]))

        return False

    def create_reliability_outputs(self, part, layout):

        """ Populates the ReliaFree Workbook calculation results tab with the
            widgets to display Variable Value Wirewound Power Resistor
            Component Class calculation results.

            Keyword Arguments:
              part -- the ReliaFree COMPONENT object.
            layout -- the layout widget to contain the display widgets.

        """

        Resistor.create_reliability_outputs(self, part, layout)

        # Create the Pi TAPS results entry.  We use the pi_u field
        # in the program database to the results.
        part.txtPiTAPS = _widg.make_entry(editable=False, bold=True)
        layout.put(part.txtPiTAPS, 155, 515)
        part.txtPiTAPS.set_text(str(part._calc_data[82]))

        part.txtPiC = _widg.make_entry(editable=False, bold=True)
        layout.put(part.txtPiC, 155, 545)
        part.txtPiC.set_text(str(part._calc_data[69]))

        part.txtPiV = _widg.make_entry(editable=False, bold=True)
        layout.put(part.txtPiV, 155, 575)
        part.txtPiV.set_text(str(part._calc_data[83]))

        return False

    def combo_callback(self, combo, part, _index_):

        """ Callback function for handling Variable Value Wirewound Power
            Resistor Component Class ComboBox changes.

            Keyword Arguments:
              combo -- the combobox widget calling this function.
               part -- the ReliaFree COMPONENT object.
            _index_ -- the user-definded index for the calling combobx.

        """

        Resistor.combo_callback(self, combo, part, _index_)
        try:
            model = part._app.winParts._full_model
            row = part._app.winParts._model.convert_iter_to_child_iter(part._app.winParts._selected_row)
        except:
            return True

        idx = combo.get_active()

        if(_index_ == 16):                      # Construction
            part._calc_data[69] = self._piC[idx - 1]
            model.set_value(row, 69, part._calc_data[69])

        return False

    def _calculate_mil_217_count(self, part):

        """ Performs MIL-HDBK-217F part count hazard rate calculations for the
            Variable Value Wirewound Power Resistor Component Class.

            Keyword Arguments:
            part -- the ReliaFree COMPONENT object.

        """

        from math import exp

        model = part._model
        row = part._selected_row

        # Retrieve hazard rate inputs.
        piQ = part._calc_data[79]
        Eidx = part._attribute[22]              # Environment index

        lambdab = self._lambdab_count[Eidx - 1]

        # Calculate component hazard rate.
        lambdap = lambdab * piQ

        part._calc_data[46] = lambdab
        model.set_value(row, 46, lambdab)

        model = part._app.HARDWARE._model
        row = part._app.HARDWARE._selected_row

        part._attribute[28] = lambdap
        model.set_value(row, 28, lambdap)

        part._app.ASSEMBLY.txtActiveHt.set_text(str(part._attribute[28]))

        return False

    def _calculate_mil_217_stress(self, part):

        """ Performs MIL-HDBK-217F part stress hazard rate calculations for
            the Variable Value Wirewound Power Resistor Component Class.

            Keyword Arguments:
            part -- the ReliaFree COMPONENT object.

        """

        from math import exp
        from math import sqrt

        model = part._model
        row = part._selected_row

        # Retrieve junction temperature inputs.
        Tamb = part._calc_data[37]
        P = part._calc_data[64]
        Trise = part._calc_data[107]
        thetaJC = part._calc_data[109]

        # Retrieve hazard rate inputs.
        Ntaps = part._calc_data[57]
        piC = part._calc_data[69]
        piQ = part._calc_data[79]
        piR = part._calc_data[80]
        Prated = part._calc_data[93]
        Vrated = part._calc_data[94]
        R = part._calc_data[95]

        # Base hazard rate
        S = P / Prated
        lambdab = 0.0481 * exp(0.334 * ((Tamb + 273) / 298)**4.66) * exp((S / 1.47) * ((Tamb + 273) / 273)**2.83)

        # Potentiometer taps correction factor.
        piTAPS = ((Ntaps ** 1.5) / 25.0) + 0.792

        # Voltage correction factor.
        Vapplied = sqrt(R * P)
        Vratio = Vapplied / Vrated
        if(Vratio > 0.0 and Vratio <= 0.1):
            piV = 1.10
        elif(Vratio > 0.1 and Vratio <= 0.2):
            piV = 1.05
        elif(Vratio > 0.2 and Vratio <= 0.6):
            piV = 1.00
        elif(Vratio > 0.6 and Vratio <= 0.7):
            piV = 1.10
        elif(Vratio > 0.7 and Vratio <= 0.8):
            piV = 1.22
        elif(Vratio > 0.8 and Vratio <= 0.9):
            piV = 1.40
        elif(Vratio > 0.9 and Vratio <= 1.0):
            piV = 2.00

        # Environmental correction factor.
        idx = part._attribute[22]
        piE = self._piE[idx - 1]

        # Calculate component hazard rate.
        lambdap = lambdab * piTAPS * piR * piV * piQ * piE

        part._calc_data[46] = lambdab
        part._calc_data[72] = piE
        part._calc_data[80] = piR
        part._calc_data[82] = piTAPS
        part._calc_data[83] = piV
        part._calc_data[94] = Vapplied
        part._calc_data[111] = Vratio
        model.set_value(row, 46, lambdab)
        model.set_value(row, 72, piE)
        model.set_value(row, 80, piR)
        model.set_value(row, 82, piTAPS)
        model.set_value(row, 83, piV)
        model.set_value(row, 94, Vapplied)
        model.set_value(row, 111, Vratio)

        model = part._app.HARDWARE._model
        row = part._app.HARDWARE._selected_row

        part._attribute[28] = lambdap
        model.set_value(row, 28, lambdap)

        part.txtLambdaB.set_text(str(part._calc_data[46]))
        part.txtPiE.set_text(str(part._calc_data[72]))
        part.txtPiR.set_text(str(part._calc_data[80]))
        part.txtPiTAPS.set_text(str(part._calc_data[82]))
        part.txtPiV.set_text(str(part._calc_data[83]))

        part._app.ASSEMBLY.txtActiveHt.set_text(str(part._attribute[28]))

        return False

class WirewoundPrecision(Resistor):

    """ Variable Value Precision Wirewound Resistor Component Class.

        Hazard Rate Models:
            1. MIL-HDBK-217F, section 9.10

    """

    _construction = ["", "Class 2", "Class 3", "Class 4", "Class 5"]
    _quality = ["", "MIL-SPEC", "Lower"]
    _range = ["", "100 to 10.0K", "10.0K to 20.0K", "20.0K to 50.0K",
              "50.0K to 100.0K", "100.0K to 200.0K", "200.0K to 500.0K"]
    _specsheet = ["", "RR0900", "RR1000", "RR1100", "RR1300", "RR1400",
                  "RR2000", "RR2100", "RR3000", "RR3100", "RR3200", "RR3300",
                  "RR3400", "RR3500", "RR3600", "RR3700", "RR3800", "RR3900"]

    def __init__(self):

        """ Initializes the Variable Value Precision Wirewound Resistor
            Component Class.

        """

        Resistor.__init__(self)

        self.subcategory = 33                   # Subcategory ID in reliafreecom database.

        # MIL-HDK-217F hazard rate calculation variables.
        # ----- ----- ----- ----- ----- ----- ----- ----- ----- ----- -----
        self._piC = [2.0, 1.0, 3.0, 1.5]
        self._piR = [1.0, 1.1, 1.4, 2.0, 2.5, 3.5]
        self._piE = [1.0, 2.0, 18.0, 8.0, 30.0, 8.0, 12.0, 13.0, 18.0, 53.0,
                     0.5, 29.0, 76.0, 1400.0]
        self._piQ = [2.5, 5.0]
        self._lambdab_count = [0.33, 0.73, 7.0, 2.9, 12.0, 3.5, 5.3, 7.1, 9.8, 23.0, 0.16, 11.0, 33.0, 510.0]
        # ----- ----- ----- ----- ----- ----- ----- ----- ----- ----- -----

        self._in_labels.append(u"Nominal Resistance (\u03A9):")
        self._in_labels.append(u"Spec Sheet:")
        self._in_labels.append(u"Construction:")
        self._in_labels.append(u"Number of Taps:")

        self._out_labels[2] = u"<span foreground=\"blue\">\u03BB<sub>p</sub> = \u03BB<sub>b</sub>\u03C0<sub>TAPS</sub>\u03C0<sub>C</sub>\u03C0<sub>R</sub>\u03C0<sub>V</sub>\u03C0<sub>Q</sub>\u03C0<sub>E</sub></span>"
        self._out_labels.append(u"\u03C0<sub>TAPS</sub>")
        self._out_labels.append(u"\u03C0<sub>C</sub>")
        self._out_labels.append(u"\u03C0<sub>V</sub>")

    def create_reliability_inputs(self, part, layout):

        """ Populates the ReliaFree Workbook calculation input tab with the
            widgets needed to select inputs for Variable Value Precision
            Wirewound Resistor Component Class prediction calculations.

            Keyword Arguments:
              part -- the ReliaFree COMPONENT object.
            layout -- the layout widget to contain the display widgets.

        """

        Resistor.create_reliability_inputs(self, part, layout)

        part.txtResistance = _widg.make_entry()
        part.txtResistance.set_name("RESISTOR")
        part.txtResistance.show()
        part.txtResistance.connect("focus-out-event",
                                   self.entry_callback,
                                   part, "float", 95)
        layout.put(part.txtResistance, 155, 485)

        part.cmbSpecSheet = _widg.make_combo(simple=True)
        part.cmbSpecSheet.set_name("RESISTOR")
        part.cmbSpecSheet.show()
        for i in range(len(self._specsheet)):
            part.cmbSpecification.insert_text(i, self._specsheet[i])
        part.cmbSpecSheet.connect("changed",
                                  self.combo_callback,
                                  part, 102)
        layout.put(part.cmbSpecSheet, 155, 515)

        part.cmbConstruction = _widg.make_combo(simple=True)
        part.cmbConstruction.set_name("RESISTOR")
        part.cmbConstruction.show()
        for i in range(len(self._construction)):
            part.cmbConstruction.insert_text(i, self._construction[i])
        part.cmbConstruction.connect("changed",
                                  self.combo_callback,
                                  part, 16)
        layout.put(part.cmbConstruction, 155, 545)

        part.txtNTaps = _widg.make_entry()
        part.txtNTaps.set_name("RESISTOR")
        part.txtNTaps.show()
        part.txtNTaps.connect("focus-out-event",
                              self.entry_callback,
                              part, "float", 57)
        layout.put(part.txtNTaps, 155, 575)

        part.txtResistance.set_text(str(part._calc_data[95]))
        part.cmbSpecSheet.set_active(int(part._calc_data[102]))
        part.cmbConstruction.set_active(int(part._calc_data[16]))
        part.txtNTaps.set_text(str(part._calc_data[57]))

        return False

    def create_reliability_outputs(self, part, layout):

        """ Populates the ReliaFree Workbook calculation results tab with the
            widgets to display Variable Value Precision Wirewound Resistor
            Component Class calculation results.

            Keyword Arguments:
              part -- the ReliaFree COMPONENT object.
            layout -- the layout widget to contain the display widgets.

        """

        Resistor.create_reliability_outputs(self, part, layout)

        # Create the Pi TAPS results entry.  We use the pi_u field
        # in the program database to the results.
        part.txtPiTAPS = _widg.make_entry(editable=False, bold=True)
        layout.put(part.txtPiTAPS, 155, 515)
        part.txtPiTAPS.set_text(str(part._calc_data[82]))

        part.txtPiC = _widg.make_entry(editable=False, bold=True)
        layout.put(part.txtPiC, 155, 545)
        part.txtPiC.set_text(str(part._calc_data[69]))

        part.txtPiV = _widg.make_entry(editable=False, bold=True)
        layout.put(part.txtPiV, 155, 575)
        part.txtPiV.set_text(str(part._calc_data[83]))

        return False

    def combo_callback(self, combo, part, _index_):

        """ Callback function for handling Variable Value Precision Wirewound
            Resistor Component Class ComboBox changes.

            Keyword Arguments:
              combo -- the combobox widget calling this function.
               part -- the ReliaFree COMPONENT object.
            _index_ -- the user-definded index for the calling combobx.

        """

        Resistor.combo_callback(self, combo, part, _index_)
        try:
            model = part._app.winParts._full_model
            row = part._app.winParts._model.convert_iter_to_child_iter(part._app.winParts._selected_row)
        except:
            return True

        idx = combo.get_active()

        if(_index_ == 16):                      # Construction
            part._calc_data[69] = self._piC[idx - 1]
            model.set_value(row, 69, part._calc_data[69])

        elif(_index_== 102):                    # Specification sheet
            if(idx == 1 or idx == 3 or idx == 4 or idx == 6 or idx == 8 or
               idx == 9 or idx == 10 or idx == 11 or idx == 12 or idx == 13):
                part._calc_data[94] = 250.0
            elif(idx == 14 or idx == 15):
                part._calc_data[94] = 423.0
            elif(idx == 2 or idx == 5 or idx == 7 or idx == 16 or idx == 17):
                part._calc_data[94] = 500.0
            else:
                part._calc_data[94] = 1.0

            model.set_value(row, 94, part._calc_data[94])

        return False

    def _calculate_mil_217_count(self, part):

        """ Performs MIL-HDBK-217F part count hazard rate calculations for the
            Variable Value Precision Wirewound Resistor Component Class.

            Keyword Arguments:
            part -- the ReliaFree COMPONENT object.

        """

        from math import exp

        model = part._model
        row = part._selected_row

        # Retrieve hazard rate inputs.
        piQ = part._calc_data[79]
        Eidx = part._attribute[22]              # Environment index

        lambdab = self._lambdab_count[Eidx - 1]

        # Calculate component hazard rate.
        lambdap = lambdab * piQ

        part._calc_data[46] = lambdab
        model.set_value(row, 46, lambdab)

        model = part._app.HARDWARE._model
        row = part._app.HARDWARE._selected_row

        part._attribute[28] = lambdap
        model.set_value(row, 28, lambdap)

        part._app.ASSEMBLY.txtActiveHt.set_text(str(part._attribute[28]))

        return False

    def _calculate_mil_217_stress(self, part):

        """ Performs MIL-HDBK-217F part stress hazard rate calculations for
            the Variable Value Precision Wirewound Resistor Component Class.

            Keyword Arguments:
            part -- the ReliaFree COMPONENT object.

        """

        from math import exp
        from math import sqrt

        model = part._model
        row = part._selected_row

        # Retrieve junction temperature inputs.
        Tamb = part._calc_data[37]
        P = part._calc_data[64]
        Trise = part._calc_data[107]
        thetaJC = part._calc_data[109]

        # Retrieve hazard rate inputs.
        Ntaps = part._calc_data[57]
        piC = part._calc_data[69]
        piQ = part._calc_data[79]
        piR = part._calc_data[80]
        Prated = part._calc_data[93]
        Vrated = part._calc_data[94]
        R = part._calc_data[95]

        # Base hazard rate
        S = P / Prated
        print P, Prated, S
        print Tamb
        lambdab = 0.0735 * exp(1.03 * ((Tamb + 273.0) / 298.0)**4.45) * exp((S / 2.74) * ((Tamb + 273.0) / 273.0)**3.51)

        # Potentiometer taps correction factor.
        piTAPS = ((Ntaps ** 1.5) / 25.0) + 0.792

        # Voltage correction factor.
        Vapplied = sqrt(R * P)
        try:
            Vratio = Vapplied / Vrated
        except:
            Vratio = 1.0

        if(Vratio > 0.0 and Vratio <= 0.1):
            piV = 1.10
        elif(Vratio > 0.1 and Vratio <= 0.2):
            piV = 1.05
        elif(Vratio > 0.2 and Vratio <= 0.6):
            piV = 1.00
        elif(Vratio > 0.6 and Vratio <= 0.7):
            piV = 1.10
        elif(Vratio > 0.7 and Vratio <= 0.8):
            piV = 1.22
        elif(Vratio > 0.8 and Vratio <= 0.9):
            piV = 1.40
        elif(Vratio > 0.9 and Vratio <= 1.0):
            piV = 2.00

        # Environmental correction factor.
        idx = part._attribute[22]
        piE = self._piE[idx - 1]

        # Calculate component hazard rate.
        lambdap = lambdab * piTAPS * piR * piV * piQ * piE

        part._calc_data[46] = lambdab
        part._calc_data[72] = piE
        part._calc_data[80] = piR
        part._calc_data[82] = piTAPS
        part._calc_data[83] = piV
        part._calc_data[94] = Vapplied
        part._calc_data[111] = Vratio
        model.set_value(row, 46, lambdab)
        model.set_value(row, 72, piE)
        model.set_value(row, 80, piR)
        model.set_value(row, 82, piTAPS)
        model.set_value(row, 83, piV)
        model.set_value(row, 94, Vapplied)
        model.set_value(row, 111, Vratio)

        model = part._app.HARDWARE._model
        row = part._app.HARDWARE._selected_row

        part._attribute[28] = lambdap
        model.set_value(row, 28, lambdap)

        part.txtLambdaB.set_text(str(part._calc_data[46]))
        part.txtPiE.set_text(str(part._calc_data[72]))
        part.txtPiR.set_text(str(part._calc_data[80]))
        part.txtPiTAPS.set_text(str(part._calc_data[82]))
        part.txtPiV.set_text(str(part._calc_data[83]))

        part._app.ASSEMBLY.txtActiveHt.set_text(str(part._attribute[28]))

        return False

class WirewoundSemiPrecision(Resistor):

    """ Variable Value Semiprecision Wirewound Resistor Component Class.

        Hazard Rate Models:
            1. MIL-HDBK-217F, section 9.11

    """

    _quality = ["", "MIL-SPEC", "Lower"]
    _range = ["", "10 to 2.0K", ">2.0K to 5.0K", ">5.0K to 10.0K"]
    _specsheet = ["", "RA10", "RA20X-XA", "RA20X-XC, F", "RA30X-XA",
                  "RA30X-XC, F", "RK09"]

    def __init__(self):

        Resistor.__init__(self)

        self.subcategory = 35                   # Subcategory ID in reliafreecom database.

        # MIL-HDK-217F hazard rate calculation variables.
        # ----- ----- ----- ----- ----- ----- ----- ----- ----- ----- -----
        self._piR = [1.0, 1.4, 2.0]
        self._piE = [1.0, 2.0, 16.0, 7.0, 28.0, 8.0, 12.0, 0.0, 0.0, 38.0,
                     0.5, 0.0, 0.0, 0.0]
        self._piQ = [2.0, 4.0]
        self._lambdab_count = [0.15, 0.35, 3.1, 1.2, 5.4, 1.9, 2.8, 0.0, 0.0, 9.0, 0.075, 0.0, 0.0, 0.0]
        # ----- ----- ----- ----- ----- ----- ----- ----- ----- ----- -----

        self._in_labels.append(u"Nominal Resistance (\u03A9):")
        self._in_labels.append(u"Spec Sheet:")
        self._in_labels.append(u"Number of Taps:")

        self._out_labels[2] = u"<span foreground=\"blue\">\u03BB<sub>p</sub> = \u03BB<sub>b</sub>\u03C0<sub>TAPS</sub>\u03C0<sub>R</sub>\u03C0<sub>V</sub>\u03C0<sub>Q</sub>\u03C0<sub>E</sub></span>"
        self._out_labels.append(u"\u03C0<sub>TAPS</sub>")
        self._out_labels.append(u"\u03C0<sub>V</sub>")

    def create_reliability_inputs(self, part, layout):

        """ Populates the ReliaFree Workbook calculation input tab with the
            widgets needed to select inputs for Variable Value Semiprecision
            Wirewound Resistor Component Class prediction calculations.

            Keyword Arguments:
              part -- the ReliaFree COMPONENT object.
            layout -- the layout widget to contain the display widgets.

        """

        Resistor.create_reliability_inputs(self, part, layout)

        part.txtResistance = _widg.make_entry()
        part.txtResistance.set_name("RESISTOR")
        part.txtResistance.show()
        part.txtResistance.connect("focus-out-event",
                                   self.entry_callback,
                                   part, "float", 95)
        layout.put(part.txtResistance, 155, 485)

        part.cmbSpecSheet = _widg.make_combo(simple=True)
        part.cmbSpecSheet.set_name("RESISTOR")
        part.cmbSpecSheet.show()
        for i in range(len(self._specsheet)):
            part.cmbSpecification.insert_text(i, self._specsheet[i])
        part.cmbSpecSheet.connect("changed",
                                  self.combo_callback,
                                  part, 102)
        layout.put(part.cmbSpecSheet, 155, 515)

        part.txtNTaps = _widg.make_entry()
        part.txtNTaps.set_name("RESISTOR")
        part.txtNTaps.show()
        part.txtNTaps.connect("focus-out-event",
                              self.entry_callback,
                              part, "float", 57)
        layout.put(part.txtNTaps, 155, 545)

        part.txtResistance.set_text(str(part._calc_data[95]))
        part.cmbSpecSheet.set_active(int(part._calc_data[102]))
        part.cmbConstruction.set_active(int(part._calc_data[16]))
        part.txtNTaps.set_text(str(part._calc_data[57]))

        return False

    def create_reliability_outputs(self, part, layout):

        """ Populates the ReliaFree Workbook calculation results tab with the
            widgets to display Variable Value Semiprecision Wirewound Resistor
            Component Class calculation results.

            Keyword Arguments:
              part -- the ReliaFree COMPONENT object.
            layout -- the layout widget to contain the display widgets.

        """

        Resistor.create_reliability_outputs(self, part, layout)

        # Create the Pi TAPS results entry.  We use the pi_u field
        # in the program database to the results.
        part.txtPiTAPS = _widg.make_entry(editable=False, bold=True)
        layout.put(part.txtPiTAPS, 155, 515)
        part.txtPiTAPS.set_text(str(part._calc_data[82]))

        part.txtPiV = _widg.make_entry(editable=False, bold=True)
        layout.put(part.txtPiV, 155, 545)
        part.txtPiV.set_text(str(part._calc_data[83]))

        return False

    def combo_callback(self, combo, part, _index_):

        """ Callback function for handling Variable Value Semiprecision
            Wirewound Resistor Component Class ComboBox changes.

            Keyword Arguments:
              combo -- the combobox widget calling this function.
               part -- the ReliaFree COMPONENT object.
            _index_ -- the user-definded index for the calling combobx.

        """

        Resistor.combo_callback(self, combo, part, _index_)

        try:
            model = part._app.winParts._full_model
            row = part._app.winParts._model.convert_iter_to_child_iter(part._app.winParts._selected_row)
        except:
            return True

        idx = combo.get_active()

        if(_index_== 102):                      # Specification sheet
            if(idx == 1):
                part._calc_data[94] = 50.0
            elif(idx == 2):
                part._calc_data[94] = 175.0
            elif(idx == 3):
                part._calc_data[94] = 75.0
            elif(idx == 4):
                part._calc_data[94] = 320.0
            elif(idx == 5):
                part._calc_data[94] = 130.0
            elif(idx == 6):
                part._calc_data[94] = 275.0
            else:
                part._calc_data[94] = 1.0

            model.set_value(row, 94, part._calc_data[94])

        return False

    def _calculate_mil_217_count(self, part):

        """ Performs MIL-HDBK-217F part count hazard rate calculations for the
            Variable Value Semiprecision Wirewound Resistor Component Class.

            Keyword Arguments:
            part -- the ReliaFree COMPONENT object.

        """

        from math import exp

        model = part._model
        row = part._selected_row

        # Retrieve hazard rate inputs.
        piQ = part._calc_data[79]
        Eidx = part._attribute[22]              # Environment index

        lambdab = self._lambdab_count[Eidx - 1]

        # Calculate component hazard rate.
        lambdap = lambdab * piQ

        part._calc_data[46] = lambdab
        model.set_value(row, 46, lambdab)

        model = part._app.HARDWARE._model
        row = part._app.HARDWARE._selected_row

        part._attribute[28] = lambdap
        model.set_value(row, 28, lambdap)

        part._app.ASSEMBLY.txtActiveHt.set_text(str(part._attribute[28]))

        return False

    def _calculate_mil_217_stress(self, part):

        """ Performs MIL-HDBK-217F part stress hazard rate calculations for
            the Variable Value Semiprecision Wirewound Resistor Component Class.

            Keyword Arguments:
            part -- the ReliaFree COMPONENT object.

        """

        from math import exp
        from math import sqrt

        model = part._model
        row = part._selected_row

        # Retrieve junction temperature inputs.
        Tamb = part._calc_data[37]
        P = part._calc_data[64]
        Trise = part._calc_data[107]
        thetaJC = part._calc_data[109]

        # Retrieve hazard rate inputs.
        Ntaps = part._calc_data[57]
        piC = part._calc_data[69]
        piQ = part._calc_data[79]
        piR = part._calc_data[80]
        Prated = part._calc_data[93]
        Vrated = part._calc_data[94]
        R = part._calc_data[95]

        # Base hazard rate
        S = P / Prated
        lambdab = 0.0398 * exp(0.514 * ((Tamb + 273) / 313)**5.28) * exp((S / 1.44) * ((Tamb + 273) / 273)**4.46)

        # Potentiometer taps correction factor.
        piTAPS = ((Ntaps ** 1.5) / 25.0) + 0.792

        # Voltage correction factor.
        Vapplied = sqrt(R * P)
        Vratio = Vapplied / Vrated
        if(Vratio > 0.0 and Vratio <= 0.1):
            piV = 1.10
        elif(Vratio > 0.1 and Vratio <= 0.2):
            piV = 1.05
        elif(Vratio > 0.2 and Vratio <= 0.6):
            piV = 1.00
        elif(Vratio > 0.6 and Vratio <= 0.7):
            piV = 1.10
        elif(Vratio > 0.7 and Vratio <= 0.8):
            piV = 1.22
        elif(Vratio > 0.8 and Vratio <= 0.9):
            piV = 1.40
        elif(Vratio > 0.9 and Vratio <= 1.0):
            piV = 2.00

        # Environmental correction factor.
        idx = part._attribute[22]
        piE = self._piE[idx - 1]

        # Calculate component hazard rate.
        lambdap = lambdab * piTAPS * piR * piV * piQ * piE

        part._calc_data[46] = lambdab
        part._calc_data[72] = piE
        part._calc_data[80] = piR
        part._calc_data[82] = piTAPS
        part._calc_data[83] = piV
        part._calc_data[94] = Vapplied
        part._calc_data[111] = Vratio
        model.set_value(row, 46, lambdab)
        model.set_value(row, 72, piE)
        model.set_value(row, 80, piR)
        model.set_value(row, 82, piTAPS)
        model.set_value(row, 83, piV)
        model.set_value(row, 94, Vapplied)
        model.set_value(row, 111, Vratio)

        model = part._app.HARDWARE._model
        row = part._app.HARDWARE._selected_row

        part._attribute[28] = lambdap
        model.set_value(row, 28, lambdap)

        part.txtLambdaB.set_text(str(part._calc_data[46]))
        part.txtPiE.set_text(str(part._calc_data[72]))
        part.txtPiR.set_text(str(part._calc_data[80]))
        part.txtPiTAPS.set_text(str(part._calc_data[82]))
        part.txtPiV.set_text(str(part._calc_data[83]))

        part._app.ASSEMBLY.txtActiveHt.set_text(str(part._attribute[28]))

        return False

class NonWirewound(Resistor):

    """ Variable Value Nonwirewound Resistor Component Class.

        Hazard Rate Models:
            1. MIL-HDBK-217F, section 9.15

    """

    _quality = ["", "S", "R", "P", "M", "MIL-R-22097", "Lower"]
    _range = ["", "10 to 50.0K", ">50.0K to 100.0K", ">100.0K to 200.0K",
              ">200.0K to 500.0K", ">500.0K to 1.0M"]
    _specsheet = ["", "RJ28", "RJ50", "RJR28", "RJR50", "Other"]

    def __init__(self):

        """ Initializes the Variable Value NonWirewound Resistor Component
            Class.

        """

        Resistor.__init__(self)

        self.subcategory = 37                   # Subcategory ID in reliafreecom database.

        # MIL-HDK-217F hazard rate calculation variables.
        # ----- ----- ----- ----- ----- ----- ----- ----- ----- ----- -----
        self._piR = [1.0, 1.1, 1.2, 1.4, 1.8]
        self._piE = [1.0, 3.0, 14.0, 6.0, 24.0, 5.0, 7.0, 12.0, 18.0, 39.0,
                     0.5, 22.0, 57.0, 1000.0]
        self._piQ = [0.02, 0.06, 0.2, 0.6, 3.0, 10.0]
        self._lambdab_count = [0.043, 0.15, 0.75, 0.35, 1.3, 0.39, 0.78, 1.8, 2.8, 2.5, 0.21, 1.2, 3.7, 49.0]
        # ----- ----- ----- ----- ----- ----- ----- ----- ----- ----- -----

        self._in_labels.append(u"Nominal Resistance (\u03A9):")
        self._in_labels.append(u"Spec Sheet:")
        self._in_labels.append(u"Number of Taps:")

        self._out_labels[2] = u"<span foreground=\"blue\">\u03BB<sub>p</sub> = \u03BB<sub>b</sub>\u03C0<sub>TAPS</sub>\u03C0<sub>R</sub>\u03C0<sub>V</sub>\u03C0<sub>Q</sub>\u03C0<sub>E</sub></span>"
        self._out_labels.append(u"\u03C0<sub>TAPS</sub>")
        self._out_labels.append(u"\u03C0<sub>V</sub>")

    def create_reliability_inputs(self, part, layout):

        """ Populates the ReliaFree Workbook calculation input tab with the
            widgets needed to select inputs for Variable Value Nonwirewound
            Resistor Component Class prediction calculations.

            Keyword Arguments:
              part -- the ReliaFree COMPONENT object.
            layout -- the layout widget to contain the display widgets.

        """

        Resistor.create_reliability_inputs(self, part, layout)

        part.txtResistance = _widg.make_entry()
        part.txtResistance.set_name("RESISTOR")
        part.txtResistance.show()
        part.txtResistance.connect("focus-out-event",
                                   self.entry_callback,
                                   part, "float", 95)
        layout.put(part.txtResistance, 155, 485)

        part.cmbSpecSheet = _widg.make_combo(simple=True)
        part.cmbSpecSheet.set_name("RESISTOR")
        part.cmbSpecSheet.show()
        part.cmbSpecSheet.connect("changed",
                                  self.combo_callback,
                                  part, 102)
        layout.put(part.cmbSpecSheet, 155, 515)

        part.txtNTaps = _widg.make_entry()
        part.txtNTaps.set_name("RESISTOR")
        part.txtNTaps.show()
        part.txtNTaps.connect("focus-out-event",
                              self.entry_callback,
                              part, "float", 57)
        layout.put(part.txtNTaps, 155, 545)

        part.txtResistance.set_text(str(part._calc_data[95]))
        part.cmbSpecSheet.set_active(int(part._calc_data[102]))
        part.txtNTaps.set_text(str(part._calc_data[57]))

        return False

    def create_reliability_outputs(self, part, layout):

        """ Populates the ReliaFree Workbook calculation results tab with the
            widgets to display Variable Value Nonwirewound Resistor Component
            Class calculation results.

            Keyword Arguments:
              part -- the ReliaFree COMPONENT object.
            layout -- the layout widget to contain the display widgets.

        """

        Resistor.create_reliability_outputs(self, part, layout)

        # Create the Pi TAPS results entry.  We use the pi_u field
        # in the program database to the results.
        part.txtPiTAPS = _widg.make_entry(editable=False, bold=True)
        layout.put(part.txtPiTAPS, 155, 515)
        part.txtPiTAPS.set_text(str(part._calc_data[82]))

        part.txtPiV = _widg.make_entry(editable=False, bold=True)
        layout.put(part.txtPiV, 155, 545)
        part.txtPiV.set_text(str(part._calc_data[83]))

        return False

    def combo_callback(self, combo, part, _index_):

        """ Callback function for handling Variable Value Nonwirewound Resistor
            Component Class ComboBox changes.

            Keyword Arguments:
              combo -- the combobox widget calling this function.
               part -- the ReliaFree COMPONENT object.
            _index_ -- the user-definded index for the calling combobx.

        """

        Resistor.combo_callback(self, combo, part, _index_)

        try:
            model = part._app.winParts._full_model
            row = part._app.winParts._model.convert_iter_to_child_iter(part._app.winParts._selected_row)
        except:
            return True

        idx = combo.get_active()

        if(_index_== 102):                      # Specification sheet
            if(idx == 1 or idx == 3):
                part._calc_data[94] = 200.0
            elif(idx == 2 or idx == 4):
                part._calc_data[94] = 200.0
            else:
                part._calc_data[94] = 300.0

            model.set_value(row, 94, part._calc_data[94])

        return False

    def _calculate_mil_217_count(self, part):

        """ Performs MIL-HDBK-217F part count hazard rate calculations for the
            Variable Value Nonwirewound Resistor Component Class.

            Keyword Arguments:
            part -- the ReliaFree COMPONENT object.

        """

        from math import exp

        model = part._model
        row = part._selected_row

        # Retrieve hazard rate inputs.
        piQ = part._calc_data[79]
        Eidx = part._attribute[22]              # Environment index

        lambdab = self._lambdab_count[Eidx - 1]

        # Calculate component hazard rate.
        lambdap = lambdab * piQ

        part._calc_data[46] = lambdab
        model.set_value(row, 46, lambdab)

        model = part._app.HARDWARE._model
        row = part._app.HARDWARE._selected_row

        part._attribute[28] = lambdap
        model.set_value(row, 28, lambdap)

        part._app.ASSEMBLY.txtActiveHt.set_text(str(part._attribute[28]))

        return False

    def _calculate_mil_217_stress(self, part):

        """ Performs MIL-HDBK-217F part stress hazard rate calculations for
            the Variable Value Nonwirewound Resistor Component Class.

            Keyword Arguments:
            part -- the ReliaFree COMPONENT object.

        """

        from math import exp
        from math import sqrt

        model = part._model
        row = part._selected_row

        # Retrieve junction temperature inputs.
        Tamb = part._calc_data[37]
        P = part._calc_data[64]
        Trise = part._calc_data[107]
        thetaJC = part._calc_data[109]

        # Retrieve hazard rate inputs.
        Ntaps = part._calc_data[57]
        piR = part._calc_data[80]
        piQ = part._calc_data[79]
        Prated = part._calc_data[93]
        Vrated = part._calc_data[94]
        R = part._calc_data[95]

        # Base hazard rate
        S = P / Prated
        lambdab = 0.019 * exp(0.445 * ((Tamb + 273) / 358)**7.3) * exp((S / 2.69) * ((Tamb + 273) / 273)**2.46)

        # Potentiometer taps correction factor.
        piTAPS = ((Ntaps ** 1.5) / 25.0) + 0.792

        # Voltage correction factor.
        Vapplied = sqrt(R * P)
        try:
            Vratio = Vapplied / Vrated
        except:
            Vratio = 1.0

        if(Vratio > 0.0 and Vratio <= 0.8):
            piV = 1.00
        elif(Vratio > 0.8 and Vratio <= 0.9):
            piV = 1.05
        elif(Vratio > 0.9 and Vratio <= 1.0):
            piV = 1.20

        # Environmental correction factor.
        idx = part._attribute[22]
        piE = self._piE[idx - 1]

        # Calculate component hazard rate.
        lambdap = lambdab * piTAPS * piR * piV * piQ * piE

        part._calc_data[46] = lambdab
        part._calc_data[72] = piE
        part._calc_data[80] = piR
        part._calc_data[82] = piTAPS
        part._calc_data[83] = piV
        part._calc_data[94] = Vapplied
        part._calc_data[111] = Vratio
        model.set_value(row, 46, lambdab)
        model.set_value(row, 72, piE)
        model.set_value(row, 80, piR)
        model.set_value(row, 82, piTAPS)
        model.set_value(row, 83, piV)
        model.set_value(row, 94, Vapplied)
        model.set_value(row, 111, Vratio)

        model = part._app.HARDWARE._model
        row = part._app.HARDWARE._selected_row

        part._attribute[28] = lambdap
        model.set_value(row, 28, lambdap)

        part.txtLambdaB.set_text(str(part._calc_data[46]))
        part.txtPiE.set_text(str(part._calc_data[72]))
        part.txtPiR.set_text(str(part._calc_data[80]))
        part.txtPiTAPS.set_text(str(part._calc_data[82]))
        part.txtPiV.set_text(str(part._calc_data[83]))

        part._app.ASSEMBLY.txtActiveHt.set_text(str(part._attribute[28]))

        return False

class Composition(Resistor):

    """ Variable Value Carbon Composition Resistor Component Class.

        Hazard Rate Models:
            1. MIL-HDBK-217F, section 9.14

    """

    _quality = ["", "MIL-SPEC", "Lower"]
    _range = ["", "50 to 50.0K", ">50.0K to 100.0K", ">100.0K to 200.0K",
              ">200.0K to 500.0K", ">500.0K to 1.0M"]
    _specsheet = ["", "RV1X-XA, XB", "RV2X-XA, XB", "RV3X-XA, XB",
                  "RV4X-XA, XB", "RV5X-XA, XB", "RV6X-XA, XB", "RV7X-XA, XB",
                  "Other"]

    def __init__(self):

        """ Initializes the Variable Value Carbon Composition Resistor
            Component Class.

        """

        Resistor.__init__(self)

        self.subcategory = 37                   # Subcategory ID in reliafreecom database.

        # MIL-HDK-217F hazard rate calculation variables.
        # ----- ----- ----- ----- ----- ----- ----- ----- ----- ----- -----
        self._piR = [1.0, 1.1, 1.2, 1.4, 1.8]
        self._piE = [1.0, 2.0, 19.0, 8.0, 29.0, 40.0, 65.0, 48.0, 78.0,
                     46.0, 0.5, 25.0, 66.0, 1200.0]
        self._piQ = [2.5, 5.0]
        self._lambdab_count =[0.05, 0.11, 1.1, 0.45, 1.7, 2.8, 4.6, 4.6, 7.5, 3.3, 0.025, 1.5, 4.7, 67.0]
        # ----- ----- ----- ----- ----- ----- ----- ----- ----- ----- -----

        self._in_labels.append(u"Nominal Resistance (\u03A9):")
        self._in_labels.append(u"Spec Sheet:")
        self._in_labels.append(u"Number of Taps:")

        self._out_labels[2] = u"<span foreground=\"blue\">\u03BB<sub>p</sub> = \u03BB<sub>b</sub>\u03C0<sub>TAPS</sub>\u03C0<sub>R</sub>\u03C0<sub>V</sub>\u03C0<sub>Q</sub>\u03C0<sub>E</sub></span>"
        self._out_labels.append(u"\u03C0<sub>TAPS</sub>")
        self._out_labels.append(u"\u03C0<sub>V</sub>")

    def create_reliability_inputs(self, part, layout):

        """ Populates the ReliaFree Workbook calculation input tab with the
            widgets needed to select inputs for Variable Value Carbon
            Composition Resistor Component Class prediction calculations.

            Keyword Arguments:
              part -- the ReliaFree COMPONENT object.
            layout -- the layout widget to contain the display widgets.

        """

        Resistor.create_reliability_inputs(self, part, layout)

        part.txtResistance = _widg.make_entry()
        part.txtResistance.set_name("RESISTOR")
        part.txtResistance.show()
        part.txtResistance.connect("focus-out-event",
                                   self.entry_callback,
                                   part, "float", 95)
        layout.put(part.txtResistance, 155, 485)

        part.cmbSpecSheet = _widg.make_combo(simple=True)
        part.cmbSpecSheet.set_name("RESISTOR")
        part.cmbSpecSheet.show()
        for i in range(len(self._specsheet)):
            part.cmbSpecSheet.insert_text(i, self._specsheet[i])
        part.cmbSpecSheet.connect("changed",
                                  self.combo_callback,
                                  part, 102)
        layout.put(part.cmbSpecSheet, 155, 515)

        part.txtNTaps = _widg.make_entry()
        part.txtNTaps.set_name("RESISTOR")
        part.txtNTaps.show()
        part.txtNTaps.connect("focus-out-event",
                              self.entry_callback,
                              part, "float", 57)
        layout.put(part.txtNTaps, 155, 545)

        part.txtResistance.set_text(str(part._calc_data[95]))
        part.cmbSpecSheet.set_active(int(part._calc_data[102]))
        part.txtNTaps.set_text(str(part._calc_data[57]))

        return False

    def create_reliability_outputs(self, part, layout):

        """ Populates the ReliaFree Workbook calculation results tab with the
            widgets to display Variable Value Carbon Composition Resistor
            Component Class calculation results.

            Keyword Arguments:
              part -- the ReliaFree COMPONENT object.
            layout -- the layout widget to contain the display widgets.

        """

        Resistor.create_reliability_outputs(self, part, layout)

        # Create the Pi TAPS results entry.  We use the pi_u field
        # in the program database to the results.
        part.txtPiTAPS = _widg.make_entry(editable=False, bold=True)
        layout.put(part.txtPiTAPS, 155, 515)
        part.txtPiTAPS.set_text(str(part._calc_data[82]))

        part.txtPiV = _widg.make_entry(editable=False, bold=True)
        layout.put(part.txtPiV, 155, 545)
        part.txtPiV.set_text(str(part._calc_data[83]))

        return False

    def combo_callback(self, combo, part, _index_):

        """ Callback function for handling Variable Value Carbon Composition
            Resistor Component Class ComboBox changes.

            Keyword Arguments:
              combo -- the combobox widget calling this function.
               part -- the ReliaFree COMPONENT object.
            _index_ -- the user-definded index for the calling combobx.

        """

        Resistor.combo_callback(self, combo, part, _index_)

        try:
            model = part._app.winParts._full_model
            row = part._app.winParts._model.convert_iter_to_child_iter(part._app.winParts._selected_row)
        except:
            return True

        idx = combo.get_active()

        if(_index_== 102):                      # Specification sheet
            if(idx == 1):
                part._calc_data[94] = 250.0
            elif(idx == 2 or idx == 4 or idx == 5 or idx == 6):
                part._calc_data[94] = 350.0
            elif(idx == 3 or idx == 7):
                part._calc_data[94] = 500.0
            else:
                part._calc_data[94] = 200.0

            model.set_value(row, 94, part._calc_data[94])

        return False

    def _calculate_mil_217_count(self, part):

        """ Performs MIL-HDBK-217F part count hazard rate calculations for the
            Variable Value Carbon Composition Resistor Component Class.

            Keyword Arguments:
            part -- the ReliaFree COMPONENT object.

        """

        from math import exp

        model = part._model
        row = part._selected_row

        # Retrieve hazard rate inputs.
        piQ = part._calc_data[79]
        Eidx = part._attribute[22]              # Environment index

        lambdab = self._lambdab_count[Eidx - 1]

        # Calculate component hazard rate.
        lambdap = lambdab * piQ

        part._calc_data[46] = lambdab
        model.set_value(row, 46, lambdab)

        model = part._app.HARDWARE._model
        row = part._app.HARDWARE._selected_row

        part._attribute[28] = lambdap
        model.set_value(row, 28, lambdap)

        part._app.ASSEMBLY.txtActiveHt.set_text(str(part._attribute[28]))

        return False

    def _calculate_mil_217_stress(self, part):

        """ Performs MIL-HDBK-217F part stress hazard rate calculations for
            the Variable Value Carbon Composition Resistor Component Class.

            Keyword Arguments:
            part -- the ReliaFree COMPONENT object.

        """

        from math import exp
        from math import sqrt

        model = part._model
        row = part._selected_row

        # Retrieve junction temperature inputs.
        Tamb = part._calc_data[37]
        P = part._calc_data[64]
        Trise = part._calc_data[107]
        thetaJC = part._calc_data[109]

        # Retrieve hazard rate inputs.
        Ntaps = part._calc_data[57]
        piR = part._calc_data[80]
        piQ = part._calc_data[79]
        Prated = part._calc_data[93]
        Vrated = part._calc_data[94]
        R = part._calc_data[95]

        # Base hazard rate
        S = P / Prated
        lambdab = 0.0246 * exp(0.459 * ((Tamb + 273) / 343)**9.3) * exp((S / 2.32) * ((Tamb + 273) / 273)**5.3)

        # Potentiometer taps correction factor.
        piTAPS = ((Ntaps ** 1.5) / 25.0) + 0.792

        # Voltage correction factor.
        Vapplied = sqrt(R * P)
        Vratio = Vapplied / Vrated
        if(Vratio > 0.0 and Vratio <= 0.8):
            piV = 1.00
        elif(Vratio > 0.8 and Vratio <= 0.9):
            piV = 1.05
        elif(Vratio > 0.9 and Vratio <= 1.0):
            piV = 1.20
        else:
            piV = 1.00

        # Environmental correction factor.
        idx = part._attribute[22]
        piE = self._piE[idx - 1]

        # Calculate component hazard rate.
        lambdap = lambdab * piTAPS * piR * piV * piQ * piE

        part._calc_data[46] = lambdab
        part._calc_data[72] = piE
        part._calc_data[80] = piR
        part._calc_data[82] = piTAPS
        part._calc_data[83] = piV
        part._calc_data[94] = Vapplied
        part._calc_data[111] = Vratio
        model.set_value(row, 46, lambdab)
        model.set_value(row, 72, piE)
        model.set_value(row, 80, piR)
        model.set_value(row, 82, piTAPS)
        model.set_value(row, 83, piV)
        model.set_value(row, 94, Vapplied)
        model.set_value(row, 111, Vratio)

        model = part._app.HARDWARE._model
        row = part._app.HARDWARE._selected_row

        part._attribute[28] = lambdap
        model.set_value(row, 28, lambdap)

        part.txtLambdaB.set_text(str(part._calc_data[46]))
        part.txtPiE.set_text(str(part._calc_data[72]))
        part.txtPiR.set_text(str(part._calc_data[80]))
        part.txtPiTAPS.set_text(str(part._calc_data[82]))
        part.txtPiV.set_text(str(part._calc_data[83]))

        part._app.ASSEMBLY.txtActiveHt.set_text(str(part._attribute[28]))

        return False

class Film(Resistor):

    """ Variable Value Film Resistor Component Class.

        Hazard Rate Models:
            1. MIL-HDBK-217F, section 9.15

    """

    _quality = ["", "MIL-SPEC", "Lower"]
    _range = ["", "Up to 10.0K", ">10.0K to 50.0K", ">50.0K to 200.0K",
              ">200.0K to 1.0M"]
    _specification = ["", "MIL-R-39023 (RQ)", "MIL-R-23285 (RVC)"]
    _specsheet = [["", "RQ090", "RQ100", "RQ110", "RQ150", "RQ160",
                   "RQ200", "RQ210", "RQ300"], ["", "RVC5", "RVC6"]]

    def __init__(self):

        """ Initializes the Variable Value Film Resistor Component Class. """

        Resistor.__init__(self)

        self.subcategory = 37                   # Subcategory ID in reliafreecom database.

        # MIL-HDK-217F hazard rate calculation variables.
        # ----- ----- ----- ----- ----- ----- ----- ----- ----- ----- -----
        self._piR = [1.0, 1.1, 1.2, 1.4, 1.8]
        self._piE = [1.0, 3.0, 14.0, 7.0, 24.0, 6.0, 12.0, 20.0, 30.0,
                     39.0, 0.5, 22.0, 57.0, 1000.0]
        self._piQ = [2.0, 4.0]
        self._lambdab_count = [0.048, 0.16, 0.76, 0.36, 1.3, 0.36, 0.72, 1.4, 2.2, 2.3, 0.024, 1.2, 3.4, 52.0]
        # ----- ----- ----- ----- ----- ----- ----- ----- ----- ----- -----

        self._in_labels.append(u"Nominal Resistance (\u03A9):")
        self._in_labels.append(u"Specification:")
        self._in_labels.append(u"Spec Sheet:")
        self._in_labels.append(u"Number of Taps:")

        self._out_labels[2] = u"<span foreground=\"blue\">\u03BB<sub>p</sub> = \u03BB<sub>b</sub>\u03C0<sub>TAPS</sub>\u03C0<sub>R</sub>\u03C0<sub>V</sub>\u03C0<sub>Q</sub>\u03C0<sub>E</sub></span>"
        self._out_labels.append(u"\u03C0<sub>TAPS</sub>")
        self._out_labels.append(u"\u03C0<sub>V</sub>")

    def create_reliability_inputs(self, part, layout):

        """ Populates the ReliaFree Workbook calculation input tab with the
            widgets needed to select inputs for Variable Value Film Resistor
            Component Class prediction calculations.

            Keyword Arguments:
              part -- the ReliaFree COMPONENT object.
            layout -- the layout widget to contain the display widgets.

        """

        Resistor.create_reliability_inputs(self, part, layout)

        part.txtResistance = _widg.make_entry()
        part.txtResistance.set_name("RESISTOR")
        part.txtResistance.show()
        part.txtResistance.connect("focus-out-event",
                                   self.entry_callback,
                                   part, "float", 95)
        layout.put(part.txtResistance, 155, 485)

        part.cmbSpecification = _widg.make_combo(simple=True)
        part.cmbSpecification.set_name("RESISTOR")
        part.cmbSpecification.show()
        for i in range(len(self._specification)):
            part.cmbSpecification.insert_text(i, self._specification[i])
        part.cmbSpecification.connect("changed",
                                      self.combo_callback,
                                      part, 101)
        layout.put(part.cmbSpecification, 155, 515)

        part.cmbSpecSheet = _widg.make_combo(simple=True)
        part.cmbSpecSheet.set_name("RESISTOR")
        part.cmbSpecSheet.show()
        part.cmbSpecSheet.connect("changed",
                                  self.combo_callback,
                                  part, 102)
        layout.put(part.cmbSpecSheet, 155, 545)

        part.txtNTaps = _widg.make_entry()
        part.txtNTaps.set_name("RESISTOR")
        part.txtNTaps.show()
        part.txtNTaps.connect("focus-out-event",
                              self.entry_callback,
                              part, "float", 57)
        layout.put(part.txtNTaps, 155, 575)

        part.txtResistance.set_text(str(part._calc_data[95]))
        part.cmbSpecification.set_active(int(part._calc_data[101]))
        part.cmbSpecSheet.set_active(int(part._calc_data[102]))
        part.txtNTaps.set_text(str(part._calc_data[57]))

        return False

    def create_reliability_outputs(self, part, layout):

        """ Populates the ReliaFree Workbook calculation results tab with the
            widgets to display Variable Value Film Resistor Component Class
            calculation results.

            Keyword Arguments:
              part -- the ReliaFree COMPONENT object.
            layout -- the layout widget to contain the display widgets.

        """

        Resistor.create_reliability_outputs(self, part, layout)

        # Create the Pi TAPS results entry.  We use the pi_u field
        # in the program database to the results.
        part.txtPiTAPS = _widg.make_entry(editable=False, bold=True)
        layout.put(part.txtPiTAPS, 155, 515)
        part.txtPiTAPS.set_text(str(part._calc_data[82]))

        part.txtPiV = _widg.make_entry(editable=False, bold=True)
        layout.put(part.txtPiV, 155, 545)
        part.txtPiV.set_text(str(part._calc_data[83]))

        return False

    def combo_callback(self, combo, part, _index_):

        """ Callback function for handling Variable Value Film Resistor
            Component Class ComboBox changes.

            Keyword Arguments:
              combo -- the combobox widget calling this function.
               part -- the ReliaFree COMPONENT object.
            _index_ -- the user-definded index for the calling combobx.

        """

        Resistor.combo_callback(self, combo, part, _index_)

        try:
            model = part._app.winParts._full_model
            row = part._app.winParts._model.convert_iter_to_child_iter(part._app.winParts._selected_row)
        except:
            return True

        idx = combo.get_active()

        if(_index_ == 101):                     # Specification
            for i in range(len(self._specsheet[idx - 1])):
                part.cmbSpecSheet.insert_text(i, self._specsheet[idx - 1][i])

        elif(_index_== 102):                    # Specification sheet
            if(idx == 1):
                part._calc_data[94] = 250.0
            elif(idx == 2 or idx == 4 or idx == 5 or idx == 6):
                part._calc_data[94] = 350.0
            elif(idx == 3 or idx == 7):
                part._calc_data[94] = 500.0
            else:
                part._calc_data[94] = 200.0

            model.set_value(row, 94, part._calc_data[94])

        return False

    def _calculate_mil_217_count(self, part):

        """ Performs MIL-HDBK-217F part count hazard rate calculations for the
            Variable Value Film Resistor Component Class.

            Keyword Arguments:
            part -- the ReliaFree COMPONENT object.

        """

        from math import exp

        model = part._model
        row = part._selected_row

        # Retrieve hazard rate inputs.
        piQ = part._calc_data[79]
        Sidx = part._calc_data[101]             # Specification index
        Eidx = part._attribute[22]              # Environment index

        lambdab = self._lambdab_count[Sidx - 1][Eidx - 1]

        # Calculate component hazard rate.
        lambdap = lambdab * piQ

        part._calc_data[46] = lambdab
        model.set_value(row, 46, lambdab)

        model = part._app.HARDWARE._model
        row = part._app.HARDWARE._selected_row

        part._attribute[28] = lambdap
        model.set_value(row, 28, lambdap)

        part._app.ASSEMBLY.txtActiveHt.set_text(str(part._attribute[28]))

        return False

    def _calculate_mil_217_stress(self, part):

        """ Performs MIL-HDBK-217F part stress hazard rate calculations for
            the Variable Value Film Resistor Component Class.

            Keyword Arguments:
            part -- the ReliaFree COMPONENT object.

        """

        from math import exp
        from math import sqrt

        model = part._model
        row = part._selected_row

        # Retrieve junction temperature inputs.
        Tamb = part._calc_data[37]
        P = part._calc_data[64]
        Trise = part._calc_data[107]
        thetaJC = part._calc_data[109]

        # Retrieve hazard rate inputs.
        Ntaps = part._calc_data[57]
        piR = part._calc_data[80]
        piQ = part._calc_data[79]
        Prated = part._calc_data[93]
        Vrated = part._calc_data[94]
        R = part._calc_data[95]

        # Base hazard rate
        idx = part.cmbSpecification.get_active()
        S = P / Prated
        if(idx == 1):
            lambdab = 0.018 * exp(((Tamb + 273) / 343)**7.4) * exp((S / 2.55) * ((Tamb + 273) / 273)**3.6)
        elif(idx == 2):
            lambdab = 0.0257 * exp(((Tamb + 273) / 398)**7.9) * exp((S / 2.45) * ((Tamb + 273) / 273)**4.3)
        else:
            lambdab = 0.0

        # Potentiometer taps correction factor.
        piTAPS = ((Ntaps ** 1.5) / 25.0) + 0.792

        # Voltage correction factor.
        Vapplied = sqrt(R * P)
        Vratio = Vapplied / Vrated
        if(Vratio >= 0.0 and Vratio <= 0.8):
            piV = 1.00
        elif(Vratio > 0.8 and Vratio <= 0.9):
            piV = 1.05
        elif(Vratio > 0.9 and Vratio <= 1.0):
            piV = 1.20
        else:
            piV = 0.0

        # Environmental correction factor.
        idx = part._attribute[22]
        piE = self._piE[idx - 1]

        # Calculate component hazard rate.
        lambdap = lambdab * piTAPS * piR * piV * piQ * piE

        part._calc_data[46] = lambdab
        part._calc_data[72] = piE
        part._calc_data[80] = piR
        part._calc_data[82] = piTAPS
        part._calc_data[83] = piV
        part._calc_data[94] = Vapplied
        part._calc_data[111] = Vratio
        model.set_value(row, 46, lambdab)
        model.set_value(row, 72, piE)
        model.set_value(row, 80, piR)
        model.set_value(row, 82, piTAPS)
        model.set_value(row, 83, piV)
        model.set_value(row, 94, Vapplied)
        model.set_value(row, 111, Vratio)

        model = part._app.HARDWARE._model
        row = part._app.HARDWARE._selected_row

        part._attribute[28] = lambdap
        model.set_value(row, 28, lambdap)

        part.txtLambdaB.set_text(str(part._calc_data[46]))
        part.txtPiE.set_text(str(part._calc_data[72]))
        part.txtPiR.set_text(str(part._calc_data[80]))
        part.txtPiTAPS.set_text(str(part._calc_data[82]))
        part.txtPiV.set_text(str(part._calc_data[83]))

        part._app.ASSEMBLY.txtActiveHt.set_text(str(part._attribute[28]))

        return False
