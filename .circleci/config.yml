# Python CircleCI 2.0 configuration file
#
# Check https://circleci.com/docs/2.0/language-python/ for more details
#
version: 2
jobs:
  build:
    docker:
      # specify the version you desire here
      # use `-browsers` prefix for selenium tests, e.g. `3.6.1-browsers`
      - image: circleci/python:2.7

      # Specify service dependencies here if necessary
      # CircleCI maintains a library of pre-built images
      # documented at https://circleci.com/docs/2.0/circleci-images/
      # - image: circleci/postgres:9.4

    working_directory: ~/repo

    steps:
      - machine:
          - timezone: America/Detroit
          - python:
              - version: 2.7.12

      - checkout

      - dependencies:
        - pre:
            - sudo apt-get update
            - sudo apt-get install -yqq python-gtk2 python-gtk2-dev

      # Download and cache dependencies
      - restore_cache:
          keys:
          - v1-dependencies-{{ checksum "requirements.txt" }}
          # fallback to using the latest cache if no exact match is found
          - v1-dependencies-

      - run:
          name: install dependencies
          command: |
            mkdir -p ./venv
            virtualenv ./venv
            . venv/bin/activate
            pip install -U pip
            pip install -U setuptools>12.0
            pip install --only-binary=numpy numpy==1.14.3
            pip install --only-binary=scipy scipy==1.0.0
            pip install coverage==4.0.3
            pip install -r requirements_run.txt
            pip install -r requirements_dev.txt
            pip install matplotlib==1.4.3

      - save_cache:
          paths:
            - ./venv
          key: v1-dependencies-{{ checksum "requirements.txt" }}

      # run tests!
      # this example uses Django's built-in test-runner
      # other common Python testing frameworks include pytest and nose
      # https://pytest.org
      # https://nose.readthedocs.io
      - run:
          name: run tests
          command: |
            . venv/bin/activate
            python setup.py test

      - store_artifacts:
          path: test-reports
          destination: test-reports
