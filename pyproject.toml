[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "ramstk"
version = "0.19.0"
description = "A tool to manage RAMS data and analyses."
readme = "README.md"
requires-python = ">=3.10"
license = "BSD-3-Clause"
keywords = [
    "reliability", "availability", "maintainability", "safety", "RAMS",
    "engineering", "quality"
]
authors = [
  { name = "Doyle 'weibullguy' Rowland", email = "doyle.rowland@reliaqual.com" },
]
maintainers = [
	{ name = "Doyle 'weibullguy' Rowland", email = "doyle.rowland@reliaqual.com" },
]
packages = [{include = "ramstk", from = "src"}]
include = [
	"LICENSE",
]
classifiers = [
    'Development Status :: 4 - Beta',
    'Environment :: X11 Applications :: GTK',
    'Intended Audience :: Other Audience',
	'Intended Audience :: Science/Research',
    'License :: OSI Approved :: BSD License',
	'Natural Language :: English',
	'Operating System :: POSIX',
    'Programming Language :: Python :: 3',
	'Programming Language :: Python :: 3.10',
	'Programming Language :: Python :: 3.11',
    'Topic :: Scientific/Engineering',
]

[project.urls]
Documentation = "https://ramstk.readthedocs.io/en/latest/"
Issues = "https://github.com/ReliaQualAssociates/ramstk/issues"
Source = "https://github.com/ReliaQualAssociates/ramstk"

[project.scripts]
ramstk = "ramstk.__main__:the_one_ring"

[tool.hatch.envs.default]
dependencies = [
	"lifelines>=0.27,<0.30",
	"matplotlib>=3.3.4",
	"numpy>=1.26,<2.0",
	"openpyxl>=3.0.6",
	"pandas>=1.3,<3.0",
	"psycopg2>=2.8.6",
	"pycairo>=1.20.0",
	"pygobject>=3.38",
	"pypubsub>=4.0.3",
	"scipy>=1.14.0",
	"sortedcontainers>=2.3.0",
	"sqlalchemy-utils>=0.40,<0.42",
	"sqlalchemy>=2.0,<3.0",
	"statsmodels>=0.13.1,<0.15.0",
	"sympy>=1.8.0",
	"toml>=0.10.2",
	"treelib>=1.5.3",
	"xlrd>=2.0.1",
	"XlsxWriter>=3.0.1",
	"xlwt>=1.3,<3.0.0",
]
[tool.hatch.envs.default.scripts]
install = "make PREFIX={args} install"

[[tool.hatch.envs.test.matrix]]
python = ["3.10", "3.11", "3.12"]

[tool.hatch.envs.test]
dependencies = [
	"coveralls",
	"coverage[toml]",
	"matplotlib",
	"mock",
	"openpyxl",
	"pandas",
	"psycopg2",
	"pygobject",
	"pypubsub",
	"python-dateutil",
	"pytest<9.0.0",
	"pytest-cov",
	"pytest-icdiff",
	"pytest-sugar",
	"scipy",
	"sortedcontainers",
	"sqlalchemy>=2.0,<3.0",
	"sympy",
	"toml",
	"treelib",
	"xlrd",
	"xlwt",
]

[tool.hatch.envs.test.scripts]
install = "make PREFIX=$VIRTUAL_ENV install"
clean-test = "rm -f .coverage* cobertura.xml && rm -fr .pytest_cache"
run-unit = "pytest -m unit --no-cov --cache-clear tests"
run-integration = "pytest -m integration --no-cov --cache-clear tests"
run-cov-unit = "COVERAGE_FILE='.coverage.unit' pytest -m unit --cov-config=pyproject.toml --cov=ramstk --cov-branch --cov-report=term tests"
run-cov-integration = "COVERAGE_FILE='.coverage.integration' pytest -m integration --cov-config=pyproject.toml --cov=ramstk --cov-branch --cov-report=term tests"
run-cov-combine = "coverage combine .coverage.unit .coverage.integration"
run-cov-report = "coverage xml --rcfile=pyproject.toml"
run-ls = "ls -al ."
test-unit = [
	"install",
	"run-unit",
]
test-integration = [
	"install",
	"run-integration",
]
cov-unit = [
	"install",
	"run-cov-unit",
]
cov-integration = [
	"install",
	"run-cov-integration",
]
test = [
	"clean-test",
	"install",
	"run-unit",
	"run-integration",
]
cov = [
	"install",
	"run-cov-unit",
	"run-cov-integration",
]
cov-report = [
	"run-cov-combine",
	"run-cov-report",
]

[tool.hatch.envs.lint]
dependencies = [
	"bandit>=1.7.5",
	"black>=24.8.0",
	"docformatter[tomli]>=1.7",
	"flake8>=7.0.0",
	"flake8-pyproject>=1.2.3",
	"isort>=5.13.2",
	"mccabe>=0.7.0",
	"mypy>=1.7.0",
	"pep8>=1.7.1",
	"pycodestyle>=2.11.1",
	"pydocstyle>=6.3.0",
	"pylint>=3.0.2",
	"radon>=6.0.1",
	"ruff",
	"seed-isort-config>=2.2.0",
]

[tool.hatch.envs.lint.scripts]
run-black = "black --fast {args}"
run-docformatter = "docformatter --in-place --config ./pyproject.toml {args}"
run-isort = "isort --settings-file ./pyproject.toml --atomic {args}"
run-pycodestyle = "pycodestyle --count --config=./setup.cfg {args}"
run-pydocstyle = "pydocstyle --count --config=./pyproject.toml {args}"
run-mccabe = "python -m mccabe -m 10 {args}"
run-radon-hal = "radon hal {args}"
run-radon-cc = "radon cc -s {args}"
run-radon-mi = "radon mi -s {args}"
format = [
	"run-black",
	"run-docformatter",
	"run-isort",
]
lint = "pylint -j0 --rcfile=./pyproject.toml {args}"
maintain = [
	"run-mccabe",
	"run-radon-hal",
	"run-radon-cc",
	"run-radon-mi",
]
security = "bandit --ini .bandit -c .bandit.conf -b .bandit.baseline -r {args}"
stylecheck = [
	"run-pycodestyle",
	"run-pydocstyle",
]
typecheck = "mypy --config-file ./pyproject.toml {args}"

[tool.hatch.envs.docs]
dependencies = [
	"Babel>=2.13.1",
	"docutils>=0.21.2",
	"pyroma>=4.0",
	"recommonmark>=0.7.1",
	"rstcheck>=6.2.0",
	"Sphinx>=8.0.2",
	"sphinx_py3doc_enhanced_theme>=2.4.0",
	"sphinxcontrib-issuetracker>=0.11",
	"sphinxcontrib-spelling>=8.0.0",
]

[tool.hatch.envs.docs.scripts]
clean-docs = "cd docs && rm -fr _build/html/*"
lint-docs = "rstcheck --config ./pyproject.toml -r docs/api docs/user"
api-docs = "sphinx-apidoc -f -o docs/api src/ramstk"
make-docs = "cd docs && make html -e"
docs = [
	"clean-docs",
	"make-docs",
]

[tool.black]
line-length = 88
target-version = ['py310', 'py311', 'py312']
include = '\.pyi?$'
exclude = '''
/(
    \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | _build
  | buck-out
  | build
  | dist
)/
'''

[tool.isort]
known_first_party = 'ramstk'
known_third_party = [
	'dateutil',
	'gi',
	'lifelines',
	'matplotlib',
	'numpy',
	'openpyxl',
	'pandas',
	'psycopg2',
	'pubsub',
	'pytest',
	'scipy',
	'setuptools',
	'sortedcontainers',
	'sql',
	'sqlalchemy',
	'sympy',
	'toml',
	'treelib',
	'xlwt',
	'ISOLATION_LEVEL_AUTOCOMMIT',
]
import_heading_firstparty = 'RAMSTK Package Imports'
import_heading_localfolder = 'RAMSTK Local Imports'
import_heading_stdlib = 'Standard Library Imports'
import_heading_thirdparty = 'Third Party Imports'
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true
line_length = 88

[tool.coverage.run]
branch = true
cover_pylib = false
omit = [
	'*/.local/*',
	'*/.virtualenv/*',
	'*/tests/*',
	'*/views/*',
	'__init__.py',
	'conf.py',
	'setup.py'
]
relative_files = true

[tool.coverage.report]
omit = [
	'*/.local/*',
	'*/.virtualenvs/*',
	'*/tests/*',
	'*/views/*',
	'__init__.py',
	'conf.py',
	'setup.py'
]
exclude_lines = [
	'pragma: no cover',
	'import',
	'if __name__ == __main__:'
]
show_missing = true

[tool.coverage.html]
directory = '.reports/coverage/html'
title = "RAMSTK Test Coverage Report"

[tool.coverage.xml]
output = 'cobertura.xml'

[tool.pytest.ini_options]
minversion = "6.0"
addopts = '--ignore=build --ignore=data --ignore=dist --ignore=docs --ignore=locale --ignore=RAMSTK.egg-info --ignore=tests --ignore=setup.py --ignore=data.py --ignore=__init__.py'
norecursedirs = [
	'.git',
	'.pytest_cache',
	'.tox',
	'build',
	'data',
	'dist',
	'docs',
	'locale',
	'RAMSTK.egg-info',
	'tests'
]
testpaths = 'tests'
markers = [
	'unit: mark the test as a unit test.',
	'integration: mark the test as an integration test.',
	'calculation: mark the test as test of a calculation method/function.',
	'gui: mark the as a GUI test.',
]

[tool.pylint.master]
ignore-paths = [
	'tests*'
]
ignore-patterns = [
	'\S*.pyi'
]
persistent = true
extension-pkg-whitelist = [
	'pango'
]
disable = ['duplicate-code']

[tool.pylint.messages_control]
disable = [
	'invalid-name',
	'line-too-long',
	'too-many-instance-attributes',
	'too-few-public-methods',
	'fixme',
	'anomalous-unicode-escape-in-string',
	'import-error',
	'no-member',
	'no-else-return',
	'cyclic-import',
	'inconsistent-return-statements',
	'attribute-defined-outside-init',
]

[tool.pylint.reports]
reports = true

[tool.pylint.miscellaneous]
notes = [
	'FIXME',
	'ISSUE',
	'TODO'
]

[tool.pylint.similarities]
min-similarity-lines = 100
ignore-comments = true
ignore-docstrings = true
ignore-imports = true

[tool.pylint.format]
max-line-length = 88
indent-string = '    '
max-module-lines = 5000

[tool.pylint.basic]
good-names = [
	'_'
]
attr-rgx = '^_{0,2}[a-zA-Z]{1,10}_{0,1}[a-zA-Z]{0,10}_{0,1}[a-zA-Z]{0,10}$'
variable-rgx = '^_{0,2}[a-zA-Z]{1,10}_{0,1}[a-zA-Z]{0,10}_{0,1}[a-zA-Z]{0,10}$'

[tool.pylint.typecheck]
ignore-mixin-members = true
ignored-classes = [
	'SQLObject'
]

[tool.pylint.design]
max-args = 6
max-positional-arguments = 6

[tool.docformatter]
non-cap = [
	"milhdbk217f",
]
wrap-summaries = 88
wrap-descriptions = 88

[tool.mypy]
allow_subclassing_any = true
follow_imports = "skip"
implicit_reexport = true
ignore_missing_imports = true

[[tool.mypy.overrides]]
module = "tests.*"
ignore_errors = true

[tool.rstcheck]
report = "warning"
ignore_directives = [
	"automodule",
	"tabularcolumns",
	"toctree",
]
ignore_roles = [
	"numref",
]

[tool.pydocstyle]
ignore = [
	'D203',
	'D204',
	'D213',
]

[tool.ruff]
exclude = ["*.pyi"]

[tool.ruff.lint]
select = ["PL",]
ignore = [
	"PLR2004",	# Magic value used in comparison.
]
